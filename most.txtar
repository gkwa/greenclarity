-- README.md --
- https://github.com/cue-lang/cue/discussions/2155#discussioncomment-4262667
- https://go.dev/play/p/b4S-VWK-yWR
-- all.txtar --
-- check.go --
package main

import (
	"os"

	"cuelang.org/go/cue"
	"cuelang.org/go/cue/cuecontext"
)

func main() {
	ctx := cuecontext.New()

	// load schema.cue
	schemaBytes, err := os.ReadFile("schema.cue")
	if err != nil {
		panic(err)
	}
	schema := ctx.CompileBytes(schemaBytes, cue.Filename("schema.cue"))
	if err := schema.Err(); err != nil {
		panic(err)
	}

	// load data.json
	dataBytes, err := os.ReadFile("data.json")
	if err != nil {
		panic(err)
	}
	data := ctx.CompileBytes(dataBytes, cue.Filename("data.json"))
	if err := data.Err(); err != nil {
		panic(err)
	}

	// use #Def_1 from the schema
	schema = schema.LookupPath(cue.ParsePath("#Def_1"))
	if err := schema.Err(); err != nil {
		panic(err)
	}

	// unify the schema with the data and validate, like `cue vet`
	v := schema.Unify(data)
	if err := v.Err(); err != nil {
		panic(err)
	}
	if err := v.Validate(); err != nil {
		panic(err)
	}
}
-- data.json --
{
    "Setup": {
        "TestItem": false
    }
}
-- go.mod --
module example.com/hello

go 1.22.0

require cuelang.org/go v0.8.2

require (
	github.com/cockroachdb/apd/v3 v3.2.1 // indirect
	github.com/google/uuid v1.2.0 // indirect
	golang.org/x/net v0.22.0 // indirect
	golang.org/x/text v0.14.0 // indirect
	gopkg.in/yaml.v3 v3.0.1 // indirect
)
-- output.txt --
[mtm@taylors-MacBook-Pro-2:greenclarity(master)]$ go run check.go
panic: #Def_1.Setup.TestItem: conflicting values false and true

goroutine 1 [running]:
main.main()
        /Users/mtm/pdev/taylormonacelli/greenclarity/check.go:42 +0x28e
exit status 2
[mtm@taylors-MacBook-Pro-2:greenclarity(master)]$ 
-- run.sh --
go mod tidy
go run check.go
-- schema.cue --
#Def_1: {
    Setup: {
        TestItem?: true
    }
}
